package application.core;

/* The following code was generated by JFlex 1.6.1 */

/*
    Grupo: Titanes
    Como ejecutar:
    Abrir la consola en la carpeta donde se encuentra el archivo, y ejecutar los siguientes
    comandos:
     -jflex wheels.jflex
     -javac Lexer.java
     -java Lexer <NombreArchivo>
    NombreArchivo = Archivo para hacer análisis léxico.

*/

import org.springframework.core.env.Environment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.InputStreamReader;
import java.io.Reader;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ejemplo.jflex</tt>
 */
@Service
class LexerTestImpl implements LexerTest {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\100\1\0\1\74\1\74\1\74\1\74\22\100\1\0\1\77\1\75"+
                    "\4\77\1\101\1\73\1\73\1\70\1\1\1\102\1\1\1\3\1\67"+
                    "\12\2\1\77\1\105\1\71\1\104\1\71\1\77\1\77\1\21\1\15"+
                    "\1\22\1\12\1\17\1\20\1\11\1\23\1\64\2\63\1\16\1\30"+
                    "\1\5\1\13\1\24\1\32\1\10\1\65\1\6\1\14\1\25\1\31"+
                    "\1\63\1\27\1\26\1\73\1\100\1\73\1\77\1\66\1\100\1\51"+
                    "\1\45\1\52\1\42\1\47\1\50\1\41\1\53\1\34\2\33\1\46"+
                    "\1\60\1\35\1\43\1\54\1\62\1\40\1\37\1\36\1\44\1\55"+
                    "\1\61\1\33\1\57\1\56\1\72\1\76\1\72\1\103\6\100\1\74"+
                    "\32\100\1\0\217\100\2\4\115\100\1\7\u1500\100\1\0\u097f\100\13\0"+
                    "\35\100\1\74\1\74\5\100\1\0\57\100\1\0\u0fa0\100\1\0\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\uffff\100\ud00f\100";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\2\4\2\5\1\4\15\5"+
                    "\1\4\2\2\1\6\1\7\3\4\1\10\1\11\1\12"+
                    "\1\13\1\14\1\3\1\0\1\4\1\0\3\4\1\0"+
                    "\1\15\1\4\1\5\1\15\1\5\2\0\4\5\1\0"+
                    "\21\5\1\0\5\5\1\4\1\0\1\16\1\2\1\0"+
                    "\1\4\1\17\1\0\1\3\1\15\20\0\3\5\2\0"+
                    "\5\5\1\0\10\5\1\0\3\5\3\0\2\5\1\15"+
                    "\3\5\1\0\1\2\1\17\2\3\34\0\1\5\1\0"+
                    "\4\5\1\0\7\5\1\0\1\16\21\0\1\5\1\0"+
                    "\4\5\1\16\7\0\1\5\2\0\1\5";

    private static int [] zzUnpackAction() {
        int [] result = new int[220];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
                    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
                    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
                    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\106\0\106\0\106"+
                    "\0\106\0\106\0\106\0\u07ee\0\u0834\0\u087a\0\u07a8\0\u08c0"+
                    "\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0af0"+
                    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20"+
                    "\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50"+
                    "\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180"+
                    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u0604"+
                    "\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u0118\0\u14c8\0\u150e\0\u1554"+
                    "\0\u159a\0\u15e0\0\u015e\0\u1626\0\u0230\0\u166c\0\u16b2\0\u16f8"+
                    "\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928"+
                    "\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58"+
                    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
                    "\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
                    "\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8"+
                    "\0\u222e\0\u2274\0\106\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2"+
                    "\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602"+
                    "\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832"+
                    "\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u196e"+
                    "\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c"+
                    "\0\u2c92\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c"+
                    "\0\u0690\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
                    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
                    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
                    "\0\106\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0"+
                    "\0\u36f6\0\u373c\0\u3782\0\u37c8";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[220];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                    "\1\12\1\7\1\13\2\7\1\14\1\15\1\16\1\17"+
                    "\1\20\1\21\1\7\1\22\1\23\3\7\1\24\2\7"+
                    "\1\25\1\7\1\10\1\26\1\12\1\7\1\13\2\7"+
                    "\1\14\1\15\1\16\1\17\1\20\1\21\1\7\1\22"+
                    "\1\23\3\7\1\24\2\7\1\25\1\26\1\27\1\30"+
                    "\2\31\1\32\1\33\1\2\1\34\1\35\1\5\1\36"+
                    "\1\37\1\40\1\41\1\42\1\43\107\0\1\31\1\44"+
                    "\64\0\3\31\15\0\1\45\1\4\1\46\1\0\2\47"+
                    "\1\0\23\47\30\50\3\47\1\51\6\0\1\5\1\47"+
                    "\1\5\10\0\1\52\1\5\1\0\2\52\1\0\56\52"+
                    "\7\0\1\5\1\52\1\5\13\0\1\53\12\0\1\54"+
                    "\14\0\1\53\12\0\1\54\37\0\1\7\1\5\1\0"+
                    "\2\7\1\0\56\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\1\56\2\7"+
                    "\1\57\7\7\1\60\14\7\1\56\2\7\1\57\7\7"+
                    "\1\60\12\7\1\55\6\0\1\5\1\47\1\5\12\0"+
                    "\1\61\1\0\1\62\25\0\1\61\1\0\1\62\25\0"+
                    "\1\61\23\0\1\7\1\5\1\0\2\7\1\0\7\7"+
                    "\1\63\27\7\1\63\16\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\3\7"+
                    "\1\64\3\7\1\65\23\7\1\64\3\7\1\65\16\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\2\7\1\0\3\7\1\66\27\7\1\66\22\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\67\2\7\1\0\7\7\1\70\14\7\1\71\12\7"+
                    "\1\70\14\7\1\71\1\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\6\7"+
                    "\1\72\11\7\1\73\1\7\1\74\13\7\1\72\11\7"+
                    "\1\73\1\7\1\74\3\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\3\7"+
                    "\1\75\1\76\1\7\1\77\2\7\1\100\21\7\1\75"+
                    "\1\76\1\7\1\77\2\7\1\100\14\7\1\55\6\0"+
                    "\1\5\1\47\1\5\10\0\1\7\1\5\1\0\2\7"+
                    "\1\0\1\101\27\7\1\101\25\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\11\7\1\102\1\7\1\103\25\7\1\102\1\7\1\103"+
                    "\12\7\1\55\6\0\1\5\1\47\1\5\10\0\1\7"+
                    "\1\5\1\0\2\7\1\0\1\104\2\7\1\105\1\106"+
                    "\4\7\1\107\16\7\1\104\2\7\1\105\1\106\4\7"+
                    "\1\107\14\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\3\7\1\110\5\7"+
                    "\1\75\21\7\1\110\5\7\1\75\14\7\1\55\6\0"+
                    "\1\5\1\47\1\5\10\0\1\7\1\5\1\111\2\7"+
                    "\1\0\13\7\1\112\10\7\1\113\16\7\1\112\10\7"+
                    "\1\113\1\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\1\114\1\7\1\0\10\7\1\57"+
                    "\14\7\1\114\12\7\1\57\15\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\61\1\7\1\115"+
                    "\1\0\24\7\1\116\1\7\1\115\25\7\1\116\1\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\117\30\0"+
                    "\30\117\3\0\1\120\20\0\1\31\65\0\1\121\1\122"+
                    "\1\31\15\0\1\31\65\0\3\31\106\0\1\32\106\0"+
                    "\1\33\12\0\2\123\1\124\1\34\1\123\2\124\1\123"+
                    "\56\124\7\123\1\125\1\124\1\34\6\123\2\0\1\47"+
                    "\1\5\1\0\2\47\1\0\56\47\7\0\1\5\1\47"+
                    "\1\5\7\0\1\45\1\44\1\126\104\0\1\44\105\0"+
                    "\1\127\1\5\1\0\2\52\1\0\56\52\7\0\1\5"+
                    "\1\52\1\5\10\0\1\47\1\5\1\0\2\47\1\0"+
                    "\23\47\30\50\3\47\1\51\6\0\1\5\1\47\1\5"+
                    "\41\0\30\51\3\0\1\51\21\0\1\52\2\0\2\52"+
                    "\1\0\56\52\10\0\1\52\15\0\1\130\1\131\12\0"+
                    "\1\132\13\0\1\130\1\131\12\0\1\132\12\0\1\131"+
                    "\24\0\1\133\1\0\1\134\1\135\1\136\1\0\1\137"+
                    "\2\0\1\140\1\141\1\142\1\143\1\144\1\145\1\0"+
                    "\1\146\1\147\3\0\1\150\2\0\1\133\1\0\1\134"+
                    "\1\135\1\136\1\0\1\137\2\0\1\140\1\141\1\142"+
                    "\1\143\1\144\1\145\1\0\1\146\1\147\3\0\1\150"+
                    "\2\0\1\133\1\135\22\0\1\151\2\0\2\151\1\0"+
                    "\56\151\1\55\21\0\1\7\1\5\1\0\2\7\1\0"+
                    "\4\7\1\152\27\7\1\152\21\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\133\1\7\1\10"+
                    "\1\135\1\12\1\7\1\13\2\7\1\14\1\15\1\16"+
                    "\1\17\1\20\1\21\1\7\1\22\1\23\3\7\1\24"+
                    "\2\7\1\25\1\7\1\10\1\26\1\12\1\7\1\13"+
                    "\2\7\1\14\1\15\1\16\1\17\1\20\1\21\1\7"+
                    "\1\22\1\23\3\7\1\24\2\7\1\25\1\26\1\55"+
                    "\6\0\1\5\1\47\1\5\10\0\1\7\1\5\1\0"+
                    "\2\7\1\0\7\7\1\153\27\7\1\153\16\7\1\55"+
                    "\6\0\1\5\1\47\1\5\34\0\1\154\27\0\1\154"+
                    "\37\0\1\155\27\0\1\155\47\0\1\7\1\5\1\0"+
                    "\1\7\1\156\1\0\11\7\1\157\14\7\1\156\12\7"+
                    "\1\157\14\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\4\7\1\160\27\7"+
                    "\1\160\21\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\10\7\1\161\27\7"+
                    "\1\161\15\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\3\7\1\162\27\7"+
                    "\1\162\22\7\1\55\6\0\1\5\1\47\1\5\15\0"+
                    "\1\163\27\0\1\163\25\0\1\163\22\0\1\7\1\5"+
                    "\1\0\1\164\1\7\1\0\25\7\1\164\30\7\1\55"+
                    "\6\0\1\5\1\47\1\5\10\0\1\7\1\5\1\0"+
                    "\2\7\1\163\27\7\1\165\25\7\1\165\1\55\6\0"+
                    "\1\5\1\47\1\5\10\0\1\7\1\5\1\0\2\7"+
                    "\1\154\27\7\1\152\25\7\1\152\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\14\7\1\166\27\7\1\166\11\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\4\7\1\167\27\7\1\167\21\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\1\57\27\7\1\57\25\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\1\170\1\7\1\0"+
                    "\25\7\1\170\30\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\3\7\1\171"+
                    "\27\7\1\171\22\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\6\7\1\72"+
                    "\27\7\1\72\17\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\1\172\27\7"+
                    "\1\172\25\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\6\7\1\173\27\7"+
                    "\1\173\17\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\11\7\1\75\27\7"+
                    "\1\75\14\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\174\2\7\1\0\3\7\1\170\20\7"+
                    "\1\175\6\7\1\170\20\7\1\175\1\7\1\55\6\0"+
                    "\1\5\1\47\1\5\10\0\1\7\1\5\1\0\2\7"+
                    "\1\54\27\7\1\57\25\7\1\57\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\5\7\1\176\27\7\1\176\20\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\1\177\27\7\1\177\25\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\200\2\7\1\0\24\7"+
                    "\1\157\27\7\1\157\1\7\1\55\6\0\1\5\1\47"+
                    "\1\5\14\0\1\201\27\0\1\201\51\0\1\7\1\5"+
                    "\1\202\2\7\1\0\24\7\1\203\27\7\1\203\1\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\1\7\1\204\1\0\26\7\1\204\27\7\1\55"+
                    "\6\0\1\5\1\47\1\5\10\0\1\7\1\5\1\0"+
                    "\1\7\1\205\1\131\12\7\1\206\13\7\1\205\1\207"+
                    "\12\7\1\206\12\7\1\207\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\1\210"+
                    "\27\7\1\210\25\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\16\7\1\152"+
                    "\27\7\1\152\7\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\117\30\0\30\117\23\0\74\121\1\0\11\121"+
                    "\1\211\1\122\65\211\1\122\1\212\1\122\14\211\75\123"+
                    "\1\213\12\123\1\124\2\123\2\124\1\123\56\124\7\123"+
                    "\1\213\1\124\7\123\2\0\1\214\104\0\1\45\1\215"+
                    "\2\0\2\52\1\0\56\52\10\0\1\52\13\0\1\133"+
                    "\1\0\1\134\1\135\1\136\1\0\1\137\2\0\1\140"+
                    "\1\141\1\216\1\143\1\144\1\145\1\0\1\146\1\147"+
                    "\3\0\1\150\2\0\1\133\1\0\1\134\1\135\1\136"+
                    "\1\0\1\137\2\0\1\140\1\141\1\216\1\143\1\144"+
                    "\1\145\1\0\1\146\1\147\3\0\1\150\2\0\1\133"+
                    "\1\135\37\0\1\217\27\0\1\217\46\0\1\220\27\0"+
                    "\1\220\55\0\1\221\2\0\1\54\7\0\1\222\14\0"+
                    "\1\221\2\0\1\54\7\0\1\222\51\0\1\223\27\0"+
                    "\1\223\51\0\1\224\3\0\1\225\23\0\1\224\3\0"+
                    "\1\225\51\0\1\226\27\0\1\226\46\0\1\67\12\0"+
                    "\1\227\14\0\1\67\12\0\1\227\14\0\1\67\37\0"+
                    "\1\230\11\0\1\231\1\0\1\232\13\0\1\230\11\0"+
                    "\1\231\1\0\1\232\36\0\1\233\1\234\1\0\1\235"+
                    "\2\0\1\236\21\0\1\233\1\234\1\0\1\235\2\0"+
                    "\1\236\44\0\1\237\27\0\1\237\66\0\1\240\1\0"+
                    "\1\241\25\0\1\240\1\0\1\241\42\0\1\242\2\0"+
                    "\1\243\1\244\4\0\1\245\16\0\1\242\2\0\1\243"+
                    "\1\244\4\0\1\245\47\0\1\246\5\0\1\233\21\0"+
                    "\1\246\5\0\1\233\40\0\1\111\16\0\1\247\10\0"+
                    "\1\111\16\0\1\247\10\0\1\111\23\0\1\151\2\0"+
                    "\2\151\1\0\56\151\1\250\21\0\1\7\1\5\1\0"+
                    "\2\7\1\0\7\7\1\57\27\7\1\57\16\7\1\55"+
                    "\6\0\1\5\1\47\1\5\10\0\1\7\1\5\1\0"+
                    "\1\57\1\7\1\0\25\7\1\57\30\7\1\55\6\0"+
                    "\1\5\1\47\1\5\25\0\1\54\27\0\1\54\42\0"+
                    "\1\251\27\0\1\251\27\0\1\251\23\0\1\7\1\5"+
                    "\1\0\2\7\1\0\4\7\1\252\27\7\1\252\21\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\2\7\1\0\2\7\1\57\27\7\1\57\23\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\2\7\1\0\5\7\1\203\27\7\1\203\20\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\253\2\7\1\0\24\7\1\254\27\7\1\254\1\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\2\7\1\0\6\7\1\255\27\7\1\255\17\7"+
                    "\1\55\6\0\1\5\1\47\1\5\14\0\1\54\27\0"+
                    "\1\54\51\0\1\7\1\5\1\0\2\7\1\0\1\7"+
                    "\1\113\27\7\1\113\24\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\1\7\1\57\1\0"+
                    "\26\7\1\57\27\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\1\7\1\256\1\0\26\7"+
                    "\1\256\27\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\11\7\1\257\27\7"+
                    "\1\257\14\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\12\7\1\57\27\7"+
                    "\1\57\13\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\11\7\1\165\27\7"+
                    "\1\165\14\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\11\7\1\256\27\7"+
                    "\1\256\14\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\6\7\1\57\27\7"+
                    "\1\57\17\7\1\55\6\0\1\5\1\47\1\5\13\0"+
                    "\1\163\17\0\1\260\7\0\1\163\17\0\1\260\32\0"+
                    "\1\7\1\5\1\0\1\165\1\7\1\0\15\7\1\261"+
                    "\7\7\1\165\17\7\1\261\10\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\6\7\1\262\27\7\1\262\17\7\1\55\6\0\1\5"+
                    "\1\47\1\5\10\0\1\7\1\5\1\0\2\7\1\0"+
                    "\11\7\1\263\27\7\1\263\14\7\1\55\6\0\1\5"+
                    "\1\47\1\5\20\0\1\54\27\0\1\54\66\0\1\54"+
                    "\27\0\1\54\50\0\1\154\27\0\1\154\41\0\1\7"+
                    "\1\5\1\0\2\7\1\0\6\7\1\152\27\7\1\152"+
                    "\17\7\1\55\6\0\1\5\1\47\1\5\10\0\1\7"+
                    "\1\5\1\0\2\7\1\0\13\7\1\57\27\7\1\57"+
                    "\12\7\1\55\6\0\1\5\1\47\1\5\10\0\1\7"+
                    "\1\5\1\133\1\7\1\10\1\135\1\12\1\7\1\13"+
                    "\2\7\1\14\1\15\1\264\1\17\1\20\1\21\1\7"+
                    "\1\22\1\23\3\7\1\24\2\7\1\25\1\7\1\10"+
                    "\1\26\1\12\1\7\1\13\2\7\1\14\1\15\1\264"+
                    "\1\17\1\20\1\21\1\7\1\22\1\23\3\7\1\24"+
                    "\2\7\1\25\1\26\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\1\265\27\7"+
                    "\1\265\25\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\2\7\1\0\7\7\1\266\27\7"+
                    "\1\266\16\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\251\2\7\1\0\24\7\1\267\27\7"+
                    "\1\267\1\7\1\55\6\0\1\5\1\47\1\5\6\0"+
                    "\70\211\1\270\15\211\1\0\1\31\65\0\1\271\2\31"+
                    "\15\0\1\45\1\44\104\0\1\45\1\215\1\126\1\0"+
                    "\2\52\1\0\56\52\10\0\1\52\17\0\1\272\5\0"+
                    "\1\230\11\0\1\231\1\0\1\232\5\0\1\272\5\0"+
                    "\1\230\11\0\1\231\1\0\1\232\33\0\1\163\27\0"+
                    "\1\163\64\0\1\273\27\0\1\273\52\0\1\154\27\0"+
                    "\1\154\60\0\1\274\27\0\1\274\44\0\1\275\12\0"+
                    "\1\200\14\0\1\275\12\0\1\200\50\0\1\276\27\0"+
                    "\1\276\61\0\1\277\27\0\1\277\50\0\1\300\27\0"+
                    "\1\300\47\0\1\301\27\0\1\301\57\0\1\154\27\0"+
                    "\1\154\25\0\1\154\44\0\1\302\27\0\1\302\45\0"+
                    "\1\303\27\0\1\303\51\0\1\54\27\0\1\54\52\0"+
                    "\1\304\27\0\1\304\63\0\1\305\27\0\1\305\60\0"+
                    "\1\230\27\0\1\230\47\0\1\306\27\0\1\306\63\0"+
                    "\1\307\27\0\1\307\60\0\1\233\27\0\1\233\40\0"+
                    "\1\174\6\0\1\304\20\0\1\174\6\0\1\304\20\0"+
                    "\1\174\30\0\1\54\27\0\1\54\25\0\1\54\35\0"+
                    "\1\310\27\0\1\310\50\0\1\311\27\0\1\311\51\0"+
                    "\1\200\27\0\1\200\27\0\1\200\25\0\1\202\27\0"+
                    "\1\202\27\0\1\202\26\0\1\312\27\0\1\312\52\0"+
                    "\1\7\1\5\1\0\2\7\1\0\1\153\27\7\1\153"+
                    "\25\7\1\55\6\0\1\5\1\47\1\5\13\0\1\154"+
                    "\27\0\1\154\52\0\1\7\1\5\1\0\1\152\1\7"+
                    "\1\0\25\7\1\152\30\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\7\7"+
                    "\1\313\27\7\1\313\16\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\17\7"+
                    "\1\57\27\7\1\57\6\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\6\7"+
                    "\1\105\27\7\1\105\17\7\1\55\6\0\1\5\1\47"+
                    "\1\5\27\0\1\314\27\0\1\314\36\0\1\7\1\5"+
                    "\1\0\2\7\1\0\11\7\1\315\27\7\1\315\14\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\304\2\7\1\0\24\7\1\170\27\7\1\170\1\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\2\7\1\0\20\7\1\105\27\7\1\105\5\7"+
                    "\1\55\6\0\1\5\1\47\1\5\10\0\1\7\1\5"+
                    "\1\0\2\7\1\0\1\316\5\7\1\72\11\7\1\73"+
                    "\1\7\1\74\5\7\1\316\5\7\1\72\11\7\1\73"+
                    "\1\7\1\74\3\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\7\7\1\317"+
                    "\27\7\1\317\16\7\1\55\6\0\1\5\1\47\1\5"+
                    "\10\0\1\7\1\5\1\0\2\7\1\0\1\165\27\7"+
                    "\1\165\25\7\1\55\6\0\1\5\1\47\1\5\10\0"+
                    "\1\7\1\5\1\0\1\320\1\7\1\0\25\7\1\320"+
                    "\30\7\1\55\6\0\1\5\1\47\1\5\75\0\1\321"+
                    "\36\0\1\322\27\0\1\322\56\0\1\230\27\0\1\230"+
                    "\41\0\1\54\27\0\1\54\64\0\1\323\27\0\1\323"+
                    "\56\0\1\202\27\0\1\202\44\0\1\253\27\0\1\253"+
                    "\27\0\1\253\37\0\1\324\27\0\1\324\50\0\1\111"+
                    "\27\0\1\111\52\0\1\325\27\0\1\325\70\0\1\326"+
                    "\27\0\1\326\56\0\1\54\27\0\1\54\54\0\1\163"+
                    "\27\0\1\163\55\0\1\325\27\0\1\325\52\0\1\54"+
                    "\27\0\1\54\55\0\1\327\27\0\1\327\60\0\1\330"+
                    "\27\0\1\330\45\0\1\54\27\0\1\54\46\0\1\7"+
                    "\1\5\1\0\2\7\1\0\11\7\1\153\27\7\1\153"+
                    "\14\7\1\55\6\0\1\5\1\47\1\5\14\0\1\154"+
                    "\27\0\1\154\51\0\1\7\1\5\1\0\1\7\1\152"+
                    "\1\0\26\7\1\152\27\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\10\7"+
                    "\1\331\27\7\1\331\15\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\11\7"+
                    "\1\72\27\7\1\72\14\7\1\55\6\0\1\5\1\47"+
                    "\1\5\10\0\1\7\1\5\1\0\2\7\1\0\1\7"+
                    "\1\57\27\7\1\57\24\7\1\55\6\0\1\5\1\47"+
                    "\1\5\27\0\1\332\27\0\1\332\44\0\1\274\27\0"+
                    "\1\274\64\0\1\333\27\0\1\333\65\0\1\54\27\0"+
                    "\1\54\44\0\1\243\27\0\1\243\43\0\1\304\27\0"+
                    "\1\304\27\0\1\304\51\0\1\243\27\0\1\243\27\0"+
                    "\1\7\1\5\1\0\2\7\1\0\11\7\1\334\27\7"+
                    "\1\334\14\7\1\55\6\0\1\5\1\47\1\5\30\0"+
                    "\1\154\27\0\1\154\54\0\1\274\27\0\1\274\36\0"+
                    "\1\7\1\5\1\0\2\7\1\0\12\7\1\152\27\7"+
                    "\1\152\13\7\1\55\6\0\1\5\1\47\1\5\6\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[14350];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\33\1\6\11\1\1\1\0\1\1\1\0"+
                    "\3\1\1\0\5\1\2\0\4\1\1\0\21\1\1\0"+
                    "\6\1\1\0\2\1\1\0\2\1\1\0\2\1\20\0"+
                    "\3\1\2\0\5\1\1\0\10\1\1\0\3\1\3\0"+
                    "\6\1\1\0\1\1\1\11\2\1\34\0\1\1\1\0"+
                    "\4\1\1\0\7\1\1\0\1\1\21\0\1\1\1\0"+
                    "\4\1\1\11\7\0\1\1\2\0\1\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[220];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    String result = "";


    LexerTestImpl() {
        yybegin(YYINITIAL);
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 252) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

            /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { System.out.print(yytext());
                    }
                    case 16: break;
                    case 2:
                    { result += ( yytext() + " - Operador Binario\n");
                    }
                    case 17: break;
                    case 3:
                    { result += ( yytext() + " - Numero\n");
                    }
                    case 18: break;
                    case 4:
                    { result += (yytext()+" - Error léxico\n");
                        yyclose();
                        return 0;
                    }
                    case 19: break;
                    case 5:
                    { result += ( yytext() + " - Identificador\n");
                    }
                    case 20: break;
                    case 6:
                    { result += ( yytext() + " - Identificador de bloque de codigo\n");
                    }
                    case 21: break;
                    case 7:
                    { result += ( yytext() + " - Parentesis\n");
                    }
                    case 22: break;
                    case 8:
                    { result += ( yytext() + " - Comilla Simple\n");
                    }
                    case 23: break;
                    case 9:
                    { result += ( yytext() + " - Coma de separacion\n");
                    }
                    case 24: break;
                    case 10:
                    { result += ( yytext() + " - Identificador de destructor\n");
                    }
                    case 25: break;
                    case 11:
                    { result += ( yytext() + " - Operador de asignacion\n");
                    }
                    case 26: break;
                    case 12:
                    { result += ( yytext() + " - Fin de linea\n");
                    }
                    case 27: break;
                    case 13:
                    { result += ( yytext() + " - Palabra reservada\n");
                    }
                    case 28: break;
                    case 14:
                    { result += ( yytext() + " - Comentarios\n");
                    }
                    case 29: break;
                    case 15:
                    { result += ( yytext() + " - Texto en comilas\n");
                    }
                    case 30: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    @Override
    public String readLexer(String filePath) {
        String encodingName = "UTF-8";
        LexerTestImpl scanner = null;
        try {
            java.io.FileInputStream stream = new java.io.FileInputStream(filePath);
            Reader reader = new InputStreamReader(stream, encodingName);
            scanner = new LexerTestImpl();
            scanner.zzReader = reader;
            while ( !scanner.zzAtEOF ) scanner.yylex();
            return scanner.result;
        }
        catch (java.io.FileNotFoundException e) {
            System.out.println("File not found : \""+filePath+"\"");
        }
        catch (java.io.IOException e) {
            System.out.println("IO error scanning file \""+filePath+"\"");
            System.out.println(e);
        }
        catch (Exception e) {
            System.out.println("Unexpected exception:");
            e.printStackTrace();
        }
        return "";
    }
}
